#!/usr/bin/env ruby
require File.join(File.dirname(__FILE__), "../lib/frameos-builder")
require File.join(File.dirname(__FILE__), '../vendor/gems/choice-0.1.4/lib/choice')

Log = Logger.new(File.open('/dev/null', 'w'))
Log.level = Logger::INFO

def main
  begin
    #
    # run the script as root
    #
    
    if not requirements_ok? 
      raise Exception.new "Missing some requirements. Aborting."
    end

    if `whoami`.strip.chomp != 'root'
      err = "You need to run this script as root"
      raise Exception.new err
    end 

    if not supported_environment?
      err = "Environment not supported. You need to run frameos-builder in CentOS 5."
      raise Exception.new err
    end

    info 'Setting up the environment'
    Dir.mkdir TMPDIR
    Dir.mkdir "#{TMPDIR}/iso"

    `mount -o loop #{ISOFILE} #{TMPDIR}/iso`
    if $?.exitstatus != 0
      error "Could't mount the ISO file #{ISOFILE}"
      raise Exception.new EXIT_MOUNTFAILED
    end

    info 'Copying ISO contents...'
    FileUtils.cp_r "#{TMPDIR}/iso", "#{TMPDIR}/newiso"
    FileUtils.mv   "#{TMPDIR}/newiso/CentOS", "#{TMPDIR}/newiso/FrameOS"

    #
    # Remove non-core pkgs
    # 
    info "Removing non-core pkgs..."
    minlist = "#{RESOURCES_DIR}/minpkglist"
    trimdir = "#{TMPDIR}/newiso/FrameOS/"
    total_pkgs, core_pkgs, removed_pkgs = trim_rpms minlist, trimdir
    info "Total PKGs: #{total_pkgs} Core PKGs: #{core_pkgs} Removed PKGs: #{removed_pkgs}"
    
    #
    # Copy frameos kickstart files
    #
    info "Copy FrameOS config files"
    gen_isolinux_file 

    #
    # Read disc info
    #
    media_info = File.read("#{TMPDIR}/iso/.discinfo").each_line.first.chomp.strip
    debug "Media INFO: #{media_info}"
    
    #
    # Replace comps.xml
    #
    info "Updating comps.xml file"
    FileUtils.cp Choice.choices[:comps_file], "#{TMPDIR}/newiso/repodata/"

    #
    # Copy the default pkgset
    # 
    extra_pkgs = Choice.choices[:extra_pkgs_dir]
    if not extra_pkgs.nil?
      info "Adding #{extra_pkgs.size} extra pkgs..."
      FileUtils.cp Dir["#{Choice.choices[:extra_pkgs_dir]}/*.rpm"], "#{TMPDIR}/newiso/FrameOS/"
    end

    #
    # Gen the default kickstart files
    #
    info "Generating kickstart files..."
    Choice.choices[:ks_files].each do |ksfile|
      ksname = File.basename(ksfile)
      FileUtils.cp ksfile, "#{TMPDIR}/newiso/#{ksname}"
    end

    #
    # Adding boot files
    # 
    info "Adding GRUB splash image"
    FileUtils.cp Choice.choices[:grub_splash_image], "#{TMPDIR}/newiso/splash.xpm.gz"
    info "Adding ISOLINUX splash image"
    FileUtils.cp Choice.choices[:isolinux_splash_image], "#{TMPDIR}/newiso/isolinux/splash.lss"
    info "Adding ISOLINUX boot msg"
    if not File.exist? Choice.choices[:isolinux_boot_msg]
      error "WARNING: Invalid boot.msg file, skipping."
    else
      FileUtils.cp Choice.choices[:isolinux_boot_msg], "#{TMPDIR}/newiso/isolinux/boot.msg"
    end
    info "Adding ISOLINUX options msg"
    if not File.exist? Choice.choices[:isolinux_options_msg]
      error "WARNING: Invalid options.msg file, skipping."
    else
      FileUtils.cp Choice.choices[:isolinux_options_msg], "#{TMPDIR}/newiso/isolinux/options.msg"
    end

    #
    # Update yum metadata
    #
    info "Updating package set..."
    createrepo_cmd = "cd #{TMPDIR}/newiso && createrepo --checksum=sha --baseurl='media://#{media_info}' -g repodata/comps.xml ."
    debug createrepo_cmd
    debug `#{createrepo_cmd}`

    #
    # Rebrand the installer
    #
    info "Rebranding the installer..."
    do_initrd_branding("#{TMPDIR}/newiso/isolinux/initrd.img", Choice.choices[:product_name], Choice.choices[:product_version], Choice.choices[:product_bugs_url])

    do_stage2_branding("#{TMPDIR}/newiso/images/stage2.img", 
                       Choice.choices[:product_name], 
                       Choice.choices[:product_version], 
                       Choice.choices[:product_bugs_url], 
                       Choice.choices[:anaconda_pixmaps_dir],
                       Choice.choices[:custom_anaconda_pkg],
                       Choice.choices[:custom_redhat_logos_pkg]
                      )

    info "Adding release notes"
    FileUtils.rm_f Dir["#{TMPDIR}/newiso/NOTES/RELEASE-NOTES*"]
    FileUtils.rm_f Dir["#{TMPDIR}/newiso/RELEASE-NOTES*"]
    Choice.choices[:release_notes].each do |rn|
      FileUtils.cp rn , "#{TMPDIR}/newiso/NOTES/"
      FileUtils.cp rn , "#{TMPDIR}/newiso/"
    end

    info "Creating the new ISO image..."
    `mkisofs -R -J -T -b isolinux/isolinux.bin -c isolinux/boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table -o #{Choice.choices[:output]} #{TMPDIR}/newiso > /dev/null 2>&1`
  rescue Exception => e
    error "#{e.message}"
    if Log.level == Logger::DEBUG
      puts "********** BACKTRACE *********"
      error e.backtrace
    end
  ensure
    #
    # Cleaup the environment
    #
    if File.directory? TMPDIR
      `umount #{TMPDIR}/iso`
      if $?.exitstatus != 0
        error "Could't umount the #{TMPDIR}/iso directory"
      end
      if CLEANUP_ENV == 1
        info 'Cleaning up the environment...'
        FileUtils.rm_rf TMPDIR
      end
    end
  end
end

Choice.options do 
  option :extra_pkgs_dir do
    short '-e'
    long '--extra-pkgs-dir=DIR'
    default "#{PACKAGES_DIR}/"
    action do |opt|
      if not File.directory?(opt)
        puts "WARNING: Extra package directory '#{opt}' is not a directory."
      end
    end
  end

  option :source_iso, :required => true do
    short '-s'
    long '--source-iso=SOURCE'
    desc 'Source CentOS/RHEL iso to use (REQUIRED)'
  end

  option :version do
    short '-v'
    long '--version'
    action do
      puts "FrameOS Builder Version " +  FRAMEOS_BUILDER_VERSION
    end
  end

  option :output do
    short '-o'
    long '--output=OUTPUT'
    default "frameos-#{Time.now.strftime('%F')}.iso"
  end

  option :ks_files do
    short '-k'
    long '--ks-files=*FILES'
    default ["#{RESOURCES_DIR}/frameos.ks", "#{RESOURCES_DIR}/frameos-ide.ks", "#{RESOURCES_DIR}/frameos-virtio.ks"]
  end

  option :grub_splash_image do
    long '--grub-splash-image=IMG' 
    default "#{IMAGES_DIR}/grub/splash.xpm.gz"
  end

  option :isolinux_splash_image do
    long '--isolinux-splash-image=IMG' 
    default "#{IMAGES_DIR}/isolinux/splash.lss"
  end

  option :isolinux_boot_msg do
    long '--isolinux-boot-msg=BOOTMSG' 
    default "#{RESOURCES_DIR}/boot.msg"
  end
  option :isolinux_options_msg do
    long '--isolinux-options-msg=OPTIONSMSG' 
    default "#{RESOURCES_DIR}/options.msg"
  end

  option :skip_cleanup do
    long '--skip-cleanup'
  end

  option :product_name do
    long '--product-name=NAME'
    default 'FrameOS'
  end

  option :product_version do
    long '--product-version=VERSION'
    default '1'
  end

  option :product_bugs_url do
    long '--product-bugs-url=VERSION'
    default 'http://bugs.mycompany.org'
  end

  option :anaconda_pixmaps_dir do
    long '--anaconda-pixmaps-dir=DIR'
    default "#{IMAGES_DIR}/anaconda"
    action do |opt|
      if not File.directory?(opt)
        $stderr.puts "WARNING: specified anaconda pixmaps dir does not exist. Using default."
        default "#{IMAGES_DIR}/anaconda/"
      end
    end
  end

  option :comps_file do
    long '--comps-file=FILE'
    default "#{RESOURCES_DIR}/comps.xml"
    action do |opt|
      if not File.exist?(opt)
        $stderr.puts "WARNING: specified comps.xml does not exist. Using default."
        default "#{RESOURCES_DIR}/comps.xml"
      end
    end
  end

  option :isolinux_config_template do
    long '--isolinux-config-template=TMPL'
    default "#{RESOURCES_DIR}/isolinux.cfg.erb"
    action do |opt|
      if not File.exist?(opt)
        $stderr.puts "WARNING: specified isolinux template does not exist. Using default."
        default "#{RESOURCES_DIR}/isolinux.cfg.erb"
      end
    end
  end
  
  option :release_notes do
    long '--release-notes=*NOTES'
    default ["#{RESOURCES_DIR}/RELEASE-NOTES-en", "#{RESOURCES_DIR}/RELEASE-NOTES-en.html"]
    action do |opt|
      if not File.exist?(opt)
        $stderr.puts "WARNING: specified file does not exist. Using default."
        default ["#{RESOURCES_DIR}/RELEASE-NOTES-en", "#{RESOURCES_DIR}/RELEASE-NOTES-en.html"]
      end
    end
  end

  option :custom_anaconda_pkg do
    long '--custom-anaconda-pkg=PKG'
    default "#{PACKAGES_DIR}/anaconda-11.1.2.195-2.el5.frameos.x86_64.rpm"
  end
  option :custom_redhat_logos_pkg do
    long '--custom-redhat-logos-pkg=PKG'
    default "#{PACKAGES_DIR}/redhat-logos-4.9.99-12.el5.frameos.noarch.rpm"
  end
end
if Choice.choices[:skip_cleanup]
  CLEANUP_ENV = 0
else
  CLEANUP_ENV = 1
end

ISOFILE=Choice.choices[:source_iso]

TBEGIN = Time.now
main
TEND = Time.now

TTOTAL = TEND - TBEGIN

puts
info "Done!"
info "#{TTOTAL} seconds to generate the ISO (#{TTOTAL/60} minutes)"
